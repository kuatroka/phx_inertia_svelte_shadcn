# Phoenix + Inertia.js + Svelte 5 + shadcn-svelte Template

## Architecture
- **Backend**: Phoenix (Elixir) with Inertia.js adapter
- **Frontend**: Svelte ^5.37.1 with Inertia.js client ^2.0.14
- **Database**: SQLite with Ecto (migrated from Postgres)
- **UI**: shadcn-svelte ^1.0.6 components + Tailwind CSS ^4.1.11
- **Build**: Vite ^6.3.5 + esbuild ^0.25.8 for frontend assets, Bun for package management
- **Server**: Bandit HTTP server (replaces Cowboy)
- **Performance**: Web Workers for high-performance game logic
- **Authentication**: Magic link authentication system
- **LiveView**: Phoenix LiveView ~1.1.2 with LazyHTML ~0.1.3 tokenizer

## Key Features
- **Clean Template**: Ready-to-use starter with authentication system
- **Magic Link Authentication**: Passwordless login with email verification
- **Modern UI Components**: Full shadcn-svelte component library
- **Responsive Design**: Mobile-first responsive layouts
- **TypeScript Ready**: Easy migration path available
- **Production Ready**: Optimized for deployment and performance

## Directory Structure
- `lib/` - Phoenix backend code
  - `accounts/` - User authentication and management
  - `your_app/` - Application-specific business logic
  - `*_web/` - Controllers, plugs, emails, and web layer
- `assets/js/` - Svelte frontend code
  - `pages/` - Inertia.js page components (Welcome.svelte, Login.svelte, Dashboard.svelte)
  - `lib/components/` - Reusable Svelte components
    - `ui/` - shadcn-svelte UI components (buttons, inputs, cards, etc.)
- `assets/public/images/` - Static assets and images
- `test/` - ExUnit tests
- `priv/repo/` - Database migrations and seeds
- `docs/` - Project documentation

## Database Schema (Template Base)
- **Users**: `id`, `username`, `email`, `confirmed_at`, timestamps
- **Auth Tokens**: `id`, `user_id`, `token`, `expires_at`, `used_at`, timestamps

*Clean template ready for your custom schemas and tables*

## Testing
```bash
# Run all tests
mix test

# Run tests with coverage
mix test --cover

# Run specific test file
mix test test/path/to/test_file.exs

# Setup test database
mix ecto.create
mix ecto.migrate
```

## Linting & Formatting
```bash
# Format Elixir code
mix format

# Check Elixir formatting
mix format --check-formatted

# Frontend linting/formatting handled by Vite/Svelte toolchain
cd assets && npm run lint  # if configured
```

## Development
```bash
# Setup project
mix setup

# Start development server
mix phx.server

# Build frontend assets
mix assets.build

# Install frontend dependencies (using Bun)
cd assets && bun install

# Run frontend dev server (if needed)
cd assets && bun run dev
```

## Template Features
- **Clean Architecture**: Well-organized code structure following Phoenix conventions
- **Authentication System**: Complete magic link implementation ready to use
- **UI Components**: Full shadcn-svelte component library integrated
- **Responsive Design**: Mobile-first layouts with Tailwind CSS
- **Development Ready**: Hot reload, asset pipeline, and build tools configured
- **Production Ready**: Optimized builds and deployment configurations

## Authentication System
- **Magic Links**: Email-based passwordless authentication
- **Token Management**: Secure token generation with expiration
- **User Sessions**: Phoenix session-based authentication
- **Email Integration**: Swoosh for email delivery
- **Security**: CSRF protection and secure token validation

## Key Dependencies

### Backend (mix.exs)
```elixir
{:phoenix, "~> 1.8.0"}
{:phoenix_live_view, "~> 1.1.2"}
{:inertia, "~> 2.5.1"}
{:ecto_sql, "~> 3.13"}
{:ecto_sqlite3, "~> 0.21"}
{:bandit, "~> 1.5"}
{:swoosh, "~> 1.16"}
{:jason, "~> 1.4"}
{:lazy_html, "~> 0.1.3"}
```

### Frontend (assets/package.json)
```json
{
  "@inertiajs/svelte": "^2.0.14",
  "svelte": "^5.37.1",
  "vite": "^6.3.5",
  "tailwindcss": "^4.1.11",
  "@tailwindcss/vite": "^4.1.0",
  "shadcn-svelte": "^1.0.6",
  "@sveltejs/vite-plugin-svelte": "^5.1.0"
}
```

### Build Tools & Development
- **Vite**: ^6.3.5 - Modern build tool with HMR and optimized bundling
- **esbuild**: ^0.25.8 - Ultra-fast JavaScript bundler (via Vite)
- **Bun**: Package manager and JavaScript runtime for development
- **LazyHTML**: ^0.1.3 - HTML tokenizer for Phoenix LiveView performance

## Performance Optimizations
- **Web Workers**: Game logic runs in separate thread
- **Canvas Optimization**: Efficient sprite rendering and dirty rectangle updates
- **Database**: SQLite for fast local development and deployment
- **Asset Pipeline**: Vite for optimized bundling and hot reload
- **HTTP/2**: Bandit server with modern protocol support

## Deployment Considerations
- **Database**: SQLite suitable for single-instance deployments
- **Assets**: Vite builds optimized production bundles
- **Email**: Configure Swoosh adapter for production email delivery
- **Environment**: Set proper Phoenix secret key and database paths
- **Performance**: Consider database connection pooling for high traffic
